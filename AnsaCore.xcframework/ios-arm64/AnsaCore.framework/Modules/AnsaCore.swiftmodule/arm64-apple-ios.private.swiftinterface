// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature AccessLevelOnImport -enable-bare-slash-regex -module-name AnsaCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import AnsaCore
@_exported import AnsaShared
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class Logging {
  public init(level: AnsaCore.LogLevel = .none, log: @escaping (Swift.String) -> Swift.Void = { message in print(message) })
  @objc deinit
}
public enum LogLevel {
  case none
  case debug
  case info
  case warning
  case error
  case verbose
  public static func == (a: AnsaCore.LogLevel, b: AnsaCore.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class AnsaSdk {
  public static func initialize(publishableKey: Swift.String, clientSecretProvider: any AnsaCore.ClientSecretProvider, logging: AnsaCore.Logging = Logging())
  public static var shared: any AnsaCore.AnsaClient
  @objc deinit
}
public protocol ClientSecretProvider {
  func provideClientSecret(ansaCustomerId: Swift.String) async -> Swift.String?
}
public protocol MerchantManager {
  func get(merchantId: Swift.String) async -> Swift.Result<AnsaShared.Merchant, AnsaCore.AnsaApiError>
  func getBasisTheoryApiKey(merchantId: Swift.String) async -> Swift.Result<Swift.String, AnsaCore.AnsaApiError>
  func getCardArtUrls() async -> Swift.Result<[Swift.String], AnsaCore.AnsaApiError>
}
public enum AddPaymentMethodType {
  case creditCard(token: Swift.String)
  case stripe(paymentMethodId: Swift.String)
  case square(cardNonce: Swift.String)
  case applePay(paymentData: Swift.String)
  case googlePay(paymentData: Swift.String)
}
public protocol AnsaClient {
  var customer: any AnsaCore.CustomerManager { get }
  var merchant: any AnsaCore.MerchantManager { get }
  var isSandboxMode: Swift.Bool { get }
}
public protocol CustomerManager {
  func get(customerId: Swift.String) async -> Swift.Result<AnsaShared.Customer, AnsaCore.AnsaApiError>
  func getPaymentMethods(customerId: Swift.String) async -> Swift.Result<AnsaShared.PaymentMethodCollection, AnsaCore.AnsaApiError>
  func addPaymentMethod(customerId: Swift.String, paymentMethodType: AnsaCore.AddPaymentMethodType, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaShared.PaymentMethod, AnsaCore.AnsaApiError>
  func deletePaymentMethod(customerId: Swift.String, paymentMethodId: Swift.String, idempotencyKey: Swift.String?) async -> Swift.Result<Swift.Void, AnsaCore.AnsaApiError>
  func getAutoReloadConfiguration(customerId: Swift.String) async -> Swift.Result<AnsaShared.AutoReloadConfiguration, AnsaCore.AnsaApiError>
  func setAutoReloadConfiguration(request: AnsaShared.AutoReloadConfigurationRequest, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaShared.AutoReloadConfiguration, AnsaCore.AnsaApiError>
  func addBalance(request: AnsaShared.AddBalanceRequest, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaShared.BalanceUpdate, AnsaCore.AnsaApiError>
  func useBalance(request: AnsaShared.UseBalanceRequest, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaShared.BalanceUpdate, AnsaCore.AnsaApiError>
  func getReloadConfig(customerId: Swift.String) async -> Swift.Result<AnsaShared.UserReloadConfiguration, AnsaCore.AnsaApiError>
  func getTransactions(customerId: Swift.String, cursor: Swift.String?) async -> Swift.Result<AnsaShared.TransactionResult, AnsaCore.AnsaApiError>
  func createVirtualCard(customerId: Swift.String, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaShared.VirtualCard, AnsaCore.AnsaApiError>
  func provisionVirtualCard(request: AnsaShared.ProvisioningRequest, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaShared.Provisioning, AnsaCore.AnsaApiError>
}
extension AnsaCore.CustomerManager {
  public func addPaymentMethod(customerId: Swift.String, paymentMethodType: AnsaCore.AddPaymentMethodType) async -> Swift.Result<AnsaShared.PaymentMethod, AnsaCore.AnsaApiError>
  public func deletePaymentMethod(customerId: Swift.String, paymentMethodId: Swift.String) async -> Swift.Result<Swift.Void, AnsaCore.AnsaApiError>
  public func setAutoReloadConfiguration(request: AnsaShared.AutoReloadConfigurationRequest) async -> Swift.Result<AnsaShared.AutoReloadConfiguration, AnsaCore.AnsaApiError>
  public func addBalance(request: AnsaShared.AddBalanceRequest) async -> Swift.Result<AnsaShared.BalanceUpdate, AnsaCore.AnsaApiError>
  public func useBalance(request: AnsaShared.UseBalanceRequest) async -> Swift.Result<AnsaShared.BalanceUpdate, AnsaCore.AnsaApiError>
  public func createVirtualCard(customerId: Swift.String) async -> Swift.Result<AnsaShared.VirtualCard, AnsaCore.AnsaApiError>
  public func provisionVirtualCard(request: AnsaShared.ProvisioningRequest) async -> Swift.Result<AnsaShared.Provisioning, AnsaCore.AnsaApiError>
}
public struct AnsaApiError : Swift.Error, Foundation.LocalizedError {
  public let humanReadableMessage: Swift.String
  public let errorMessage: Swift.String
  public var errorDescription: Swift.String? {
    get
  }
}
extension AnsaCore.LogLevel : Swift.Equatable {}
extension AnsaCore.LogLevel : Swift.Hashable {}
