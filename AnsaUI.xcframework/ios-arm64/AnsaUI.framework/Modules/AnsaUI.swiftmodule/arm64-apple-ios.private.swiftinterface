// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature AccessLevelOnImport -enable-bare-slash-regex -module-name AnsaUI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AnsaCore
@_exported import AnsaUI
import Combine
import DeveloperToolsSupport
import Foundation
import PassKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _PassKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class AnsaTheme {
  public static func set(brandColors: AnsaUI.BrandColors? = nil, fonts: AnsaUI.AnsaFonts? = nil)
  @objc deinit
}
public struct PaymentMethodUiModel : Swift.Equatable, Swift.Hashable {
  public init(id: Swift.String, card: AnsaUI.CardUiModel, isExpired: Swift.Bool)
  public var obfuscatedCardNumber: Swift.String {
    get
  }
  public func isValid() -> Swift.Bool
  public static func == (a: AnsaUI.PaymentMethodUiModel, b: AnsaUI.PaymentMethodUiModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CardUiModel : Swift.Equatable, Swift.Hashable {
  public init(brand: AnsaUI.CardBrand, firstSix: Swift.String, lastFour: Swift.String)
  public static func == (a: AnsaUI.CardUiModel, b: AnsaUI.CardUiModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CardBrand {
  case amex
  case mastercard
  case maestro
  case visa
  case visaElectron
  case discover
  case dinersClub
  case unknown
  public var displayname: Swift.String {
    get
  }
  public var imageSource: AnsaUI.AnsaImageSource {
    get
  }
  public static func == (a: AnsaUI.CardBrand, b: AnsaUI.CardBrand) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AboutTapToPayActionView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(uiModel: AnsaUI.TapToPayUiModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI23AboutTapToPayActionViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PaymentMethodPreview : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(selectedPaymentMethod: AnsaUI.PaymentMethodUiModel?, onClick: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI20PaymentMethodPreviewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct AnsaErrorView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A9ErrorViewV4bodyQrvp", 0) __
}

public struct BrandColors {
  public init(primary: SwiftUICore.Color? = nil, secondary: SwiftUICore.Color? = nil)
}
@_Concurrency.MainActor @preconcurrency public struct AnsaImage : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(source: AnsaUI.AnsaImageSource, renderingMode: SwiftUICore.Image.TemplateRenderingMode = .original)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A5ImageV4bodyQrvp", 0) __
}
public enum AnsaImageSource : Swift.String {
  case autopay
  case wallet
  case sparkle
  case alert
  case close
  case check
  case error
  case backArrow
  case chevronRight
  case chevronLeft
  case plus
  case nfc
  case location
  case errorCard
  case placeholderCard
  case applePay
  case americanExpress
  case dinersClub
  case discover
  case maestro
  case masterCard
  case visaElectron
  case visa
  case ansaCard
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias CreateVirtualCardAction = () async -> (Swift.Result<AnsaShared.VirtualCard, AnsaCore.AnsaApiError>)
public typealias ProvisioningVirtualCardAction = (Swift.String, AnsaShared.WalletProvider) async -> (Swift.Result<AnsaShared.Provisioning, AnsaCore.AnsaApiError>)
extension AnsaShared.VirtualCard : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
}
public enum AnsaButtonState {
  case disabled
  case loading
  case enabled
  public var isEnabled: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public static func == (a: AnsaUI.AnsaButtonState, b: AnsaUI.AnsaButtonState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AutoReloadUiModel {
  case enabled(paymentMethodId: Swift.String?, reloadAmount: Swift.Int?, reloadThreshold: Swift.Int?)
  case disabled(reloadThreshold: Swift.Int?)
}
public enum AutoReloadUpdateInfo {
  case enabled(paymentMethodId: Swift.String, reloadAmount: Swift.Int, reloadThreshold: Swift.Int)
  case disabled
}
@_Concurrency.MainActor @preconcurrency public struct AutoReloadActionView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(uiModel: AnsaUI.AutoReloadUiModel, onClick: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI20AutoReloadActionViewV4bodyQrvp", 0) __
}
public typealias AddPaymentSourceClick = (() -> Swift.Void)
@_Concurrency.MainActor @preconcurrency public struct AddFundsBottomSheet : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(reloadBuckets: [AnsaUI.ReloadBucketUiModel], customCurrencyInputSetting: AnsaUI.CustomCurrencyInputSetting, paymentMethods: [AnsaUI.PaymentMethodUiModel], addPaymentSourceClick: @escaping AnsaUI.AddPaymentSourceClick, addFundsClick: @escaping (AnsaUI.ReloadAmountSelection, AnsaUI.PaymentMethodUiModel) async -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI19AddFundsBottomSheetV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct TransactionHistoryTable : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(transactions: [AnsaUI.TransactionUiModel])
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI23TransactionHistoryTableV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct ManagedAnsaBalanceScreen<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(ansaClient: any AnsaCore.AnsaClient, customerId: Swift.String, merchantId: Swift.String, triggerRefresh: SwiftUICore.Binding<Swift.Bool> = .constant(false), addPaymentSourceContent: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public init(ansaClient: any AnsaCore.AnsaClient, customerId: Swift.String, merchantId: Swift.String, triggerRefresh: SwiftUICore.Binding<Swift.Bool> = .constant(false)) where Content == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI07ManagedA13BalanceScreenV4bodyQrvp", 0) __<Content>
}
@_Concurrency.MainActor @preconcurrency public struct AnsaActionView<EndSlotView> : SwiftUICore.View where EndSlotView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(icon: SwiftUICore.Image?, label: Swift.String, subtitle: Swift.String? = nil, endSlot: @escaping () -> EndSlotView, onClick: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public init(icon: SwiftUICore.Image?, label: Swift.String, subtitle: Swift.String? = nil, onClick: @escaping () -> Swift.Void) where EndSlotView == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A10ActionViewV4bodyQrvp", 0) __<EndSlotView>
}

public struct AnsaFonts {
}
public struct TitleFonts {
}
public struct BodyFonts {
}
@_Concurrency.MainActor @preconcurrency public struct TapToPayActionView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(uiModel: AnsaUI.TapToPayUiModel, createVirtualCardAction: @escaping AnsaUI.CreateVirtualCardAction, provisioningVirtualCardAction: @escaping AnsaUI.ProvisioningVirtualCardAction)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI18TapToPayActionViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class PaymentMethodUpdateManager {
  public static let shared: AnsaUI.PaymentMethodUpdateManager
  public func onPaymentMethodAdded(paymentMethod: AnsaShared.PaymentMethod)
  @objc deinit
}
public typealias AmountInCents = Swift.Int
public typealias AmountInDollars = Swift.Double
@_Concurrency.MainActor @preconcurrency public struct AnsaBalanceScreen : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(walletBalance: Swift.String, alertViewUiModel: AnsaUI.AlertViewUiModel?, tapToPayUiModel: AnsaUI.TapToPayUiModel?, autoReloadUiModel: AnsaUI.AutoReloadUiModel?, transactions: [AnsaUI.TransactionUiModel], cardArtUrl: Swift.String?, isDemoMode: Swift.Bool, addFundsClick: @escaping () -> Swift.Void, autoReloadRowClick: @escaping () -> Swift.Void, createVirtualCardAction: @escaping AnsaUI.CreateVirtualCardAction, provisionVirtualCardAction: @escaping AnsaUI.ProvisioningVirtualCardAction, onRefreshRequsted: @escaping () async -> Swift.Void, onBackClick: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A13BalanceScreenV4bodyQrvp", 0) __
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CurrencyUITextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency public init(value: SwiftUICore.Binding<Swift.Int>, fontSize: Swift.Int, hintText: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func deleteBackward()
  @_Concurrency.MainActor @preconcurrency public func updateValue(value: Swift.Int)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct TapToPayAddToWalletView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(uiModel: AnsaUI.TapToPayUiModel, createVirtualCardAction: @escaping AnsaUI.CreateVirtualCardAction, provisioningVirtualCardAction: @escaping AnsaUI.ProvisioningVirtualCardAction)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI011TapToPayAddD10WalletViewV4bodyQrvp", 0) __
}

public struct AlertViewUiModel {
  public let primaryText: Swift.String
  public let secondaryText: Swift.String?
  public let alertViewType: AnsaUI.AlertViewType
  public let alertShape: AnsaUI.AlertShape
  public init(primaryText: Swift.String, secondaryText: Swift.String?, alertViewType: AnsaUI.AlertViewType, alertShape: AnsaUI.AlertShape)
}
public enum AlertViewType {
  case bonus
  case alert
  public static func == (a: AnsaUI.AlertViewType, b: AnsaUI.AlertViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AlertShape {
  case upArrow
  case downArrow
  public static func == (a: AnsaUI.AlertShape, b: AnsaUI.AlertShape) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AnsaButton : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public let label: Swift.String
  @_Concurrency.MainActor @preconcurrency public let enabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public let backgroundColor: SwiftUICore.Color
  @_Concurrency.MainActor @preconcurrency public let labelColor: SwiftUICore.Color
  @_Concurrency.MainActor @preconcurrency public let cornerRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public let isLoading: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public let leftIcon: SwiftUICore.Image?
  @_Concurrency.MainActor @preconcurrency public let rightIcon: SwiftUICore.Image?
  @_Concurrency.MainActor @preconcurrency public let onClick: () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public init(label: Swift.String, enabled: Swift.Bool = true, backgroundColor: SwiftUICore.Color? = nil, labelColor: SwiftUICore.Color? = nil, cornerRadius: CoreFoundation.CGFloat = 8, isLoading: Swift.Bool = false, leftIcon: SwiftUICore.Image? = nil, rightIcon: SwiftUICore.Image? = nil, onClick: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A6ButtonV4bodyQrvp", 0) __
}

public struct TapToPayUiModel {
  public init(merchantName: Swift.String)
}
public enum CustomCurrencyInputSetting : Swift.Hashable {
  case enabled(AnsaUI.CustomCurrencyInputUiModel)
  case disabled
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AnsaUI.CustomCurrencyInputSetting, b: AnsaUI.CustomCurrencyInputSetting) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension AnsaUI.CustomCurrencyInputSetting {
  public var minimumAmount: AnsaUI.AmountInCents? {
    get
  }
  public var maximumAmount: AnsaUI.AmountInCents? {
    get
  }
  public func isInputValid(input: AnsaUI.AmountInCents) -> Swift.Bool
  public func inputErrorMessage(input: AnsaUI.AmountInCents) -> Swift.String?
}
public struct CustomCurrencyInputUiModel : Swift.Hashable {
  public init(minimum: AnsaUI.AmountInCents?, maximum: AnsaUI.AmountInCents?, reloadBuckets: [AnsaUI.ReloadBucketUiModel]?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AnsaUI.CustomCurrencyInputUiModel, b: AnsaUI.CustomCurrencyInputUiModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct BasisTheoryAddCardView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI22BasisTheoryAddCardViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct BasisTheoryCardView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI19BasisTheoryCardViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct BasisTheoryCardDetailsView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI26BasisTheoryCardDetailsViewV4bodyQrvp", 0) __<Content>
}
public struct ReloadBucketUiModel : Swift.Hashable {
  public init(id: Swift.String, reloadAmount: Swift.Int, bonusAmount: Swift.Int?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AnsaUI.ReloadBucketUiModel, b: AnsaUI.ReloadBucketUiModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Array where Element == AnsaUI.ReloadBucketUiModel {
  public func hasBonus() -> Swift.Bool
}
extension AnsaUI.ReloadBucketUiModel {
  public var topUpAmountDisplayString: Swift.String {
    get
  }
  public var bonusAmountDisplayString: Swift.String? {
    get
  }
  public func hasBonus() -> Swift.Bool
  public func isSelected(currentSelection: AnsaUI.ReloadAmountSelection?) -> Swift.Bool
  public func topUpAndBonusDisplayString() -> Foundation.AttributedString
}
extension Swift.Array where Element == AnsaUI.ReloadBucketUiModel {
  public func getDefaultBucket() -> AnsaUI.ReloadBucketUiModel?
}
@_Concurrency.MainActor @preconcurrency public struct ReloadBucketView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(uiModel: AnsaUI.ReloadBucketUiModel, isSelected: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI16ReloadBucketViewV4bodyQrvp", 0) __
}


extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func ansaNavigationBar<LeadingSlotView, TrailingSlotView>(title: Swift.String = "Wallet", leadingSlot: @escaping (() -> LeadingSlotView), trailingSlot: @escaping (() -> TrailingSlotView)) -> some SwiftUICore.View where LeadingSlotView : SwiftUICore.View, TrailingSlotView : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func ansaNavigationBar<LeadingSlotView>(title: Swift.String = "Wallet", leadingSlot: @escaping (() -> LeadingSlotView)) -> some SwiftUICore.View where LeadingSlotView : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func ansaNavigationBar<TrailingSlotView>(title: Swift.String = "Wallet", trailingSlot: @escaping (() -> TrailingSlotView)) -> some SwiftUICore.View where TrailingSlotView : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func ansaNavigationBar(title: Swift.String = "Wallet") -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct AlertView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public let uiModel: AnsaUI.AlertViewUiModel
  @_Concurrency.MainActor @preconcurrency public init(uiModel: AnsaUI.AlertViewUiModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI9AlertViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct AutoReloadBottomSheetView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(autoReloadUiModel: AnsaUI.AutoReloadUiModel, reloadBuckets: [AnsaUI.ReloadBucketUiModel], customCurrencyInputSetting: AnsaUI.CustomCurrencyInputSetting, paymentMethods: [AnsaUI.PaymentMethodUiModel], addPaymentSourceClick: @escaping () -> Swift.Void, onSaveClick: @escaping (AnsaUI.AutoReloadUpdateInfo) async -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI25AutoReloadBottomSheetViewV4bodyQrvp", 0) __
}
public enum PaymentCardType : Swift.String {
  case amex
  case mastercard
  case maestro
  case visa
  case visaElectron
  case discover
  case dinersClub
  public static var all: [AnsaUI.PaymentCardType]
  public init?(cardNumber: Swift.String)
  public static func suggestedTypeForCardNumber(_ cardNumber: Swift.String?) -> AnsaUI.PaymentCardType?
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ReloadAmountSelection {
  case preconfigured(AnsaUI.ReloadBucketUiModel)
  case custom(AnsaUI.AmountInDollars)
}
public struct TransactionUiModel : Swift.Hashable {
  public init(id: Swift.String, transactionText: Swift.String, dataAndTimeText: Swift.String, amount: Swift.String, isCredit: Swift.Bool?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AnsaUI.TransactionUiModel, b: AnsaUI.TransactionUiModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AnsaTransactionView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A15TransactionViewV4bodyQrvp", 0) __
}

public typealias AddPaymentMethodCompletion = (Swift.Result<AnsaShared.PaymentMethod, any Swift.Error>) -> Swift.Void
@_Concurrency.MainActor @preconcurrency public struct AddNewCardBottomSheetView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI25AddNewCardBottomSheetViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct CurrencyTextField : SwiftUI.UIViewRepresentable {
  public typealias UIViewType = AnsaUI.CurrencyUITextField
  @_Concurrency.MainActor @preconcurrency public init(value: SwiftUICore.Binding<Swift.Int>, forceOverrideValue: SwiftUICore.Binding<Swift.Int>, fontSize: Swift.Int, hintText: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: AnsaUI.CurrencyTextField.Context) -> AnsaUI.CurrencyUITextField
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: AnsaUI.CurrencyUITextField, context: AnsaUI.CurrencyTextField.Context)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Coordinator = Swift.Void
}
public enum AboutTapToPayLineType {
  case addToWallet
  case checkout
  case use
  public static func == (a: AnsaUI.AboutTapToPayLineType, b: AnsaUI.AboutTapToPayLineType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AboutTapToPayInfoView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(uiModel: AnsaUI.TapToPayUiModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI21AboutTapToPayInfoViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct AboutTapToPayLineView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI21AboutTapToPayLineViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct CurrencyTextFieldSwiftUIWrapper : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(_ placeholder: Swift.String = "", value: SwiftUICore.Binding<Swift.Double?>, isResponder: SwiftUICore.Binding<Swift.Bool>? = nil, tag: Swift.Int = 0, alwaysShowFractions: Swift.Bool = true, numberOfDecimalPlaces: Swift.Int = 2, currencySymbol: Swift.String? = "$", font: UIKit.UIFont? = nil, foregroundColor: UIKit.UIColor? = nil, accentColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment? = nil, contentType: UIKit.UITextContentType? = nil, autocorrection: UIKit.UITextAutocorrectionType = .default, autocapitalization: UIKit.UITextAutocapitalizationType = .sentences, keyboardType: UIKit.UIKeyboardType = .decimalPad, returnKeyType: UIKit.UIReturnKeyType = .default, isSecure: Swift.Bool = false, isUserInteractionEnabled: Swift.Bool = true, clearsOnBeginEditing: Swift.Bool = false, onDoneClick: @escaping () -> Swift.Void = {}, onReturn: @escaping () -> Swift.Void = {}, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: SwiftUI.UIViewRepresentableContext<AnsaUI.CurrencyTextFieldSwiftUIWrapper>) -> UIKit.UITextField
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> AnsaUI.CurrencyTextFieldSwiftUIWrapper.Coordinator
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ textField: UIKit.UITextField, context: SwiftUI.UIViewRepresentableContext<AnsaUI.CurrencyTextFieldSwiftUIWrapper>)
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIView(_ uiView: UIKit.UITextField, coordinator: AnsaUI.CurrencyTextFieldSwiftUIWrapper.Coordinator)
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class Coordinator : ObjectiveC.NSObject, UIKit.UITextFieldDelegate {
    @_Concurrency.MainActor @preconcurrency @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
    @objc deinit
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias UIViewType = UIKit.UITextField
}
extension AnsaUI.CardBrand : Swift.Equatable {}
extension AnsaUI.CardBrand : Swift.Hashable {}
extension AnsaUI.AboutTapToPayActionView : Swift.Sendable {}
extension AnsaUI.PaymentMethodPreview : Swift.Sendable {}
extension AnsaUI.AnsaErrorView : Swift.Sendable {}
extension AnsaUI.AnsaImage : Swift.Sendable {}
extension AnsaUI.AnsaImageSource : Swift.Equatable {}
extension AnsaUI.AnsaImageSource : Swift.Hashable {}
extension AnsaUI.AnsaImageSource : Swift.RawRepresentable {}
extension AnsaUI.AnsaButtonState : Swift.Equatable {}
extension AnsaUI.AnsaButtonState : Swift.Hashable {}
extension AnsaUI.AutoReloadActionView : Swift.Sendable {}
extension AnsaUI.AddFundsBottomSheet : Swift.Sendable {}
extension AnsaUI.TransactionHistoryTable : Swift.Sendable {}
extension AnsaUI.ManagedAnsaBalanceScreen : Swift.Sendable {}
extension AnsaUI.AnsaActionView : Swift.Sendable {}
extension AnsaUI.TapToPayActionView : Swift.Sendable {}
extension AnsaUI.AnsaBalanceScreen : Swift.Sendable {}
extension AnsaUI.TapToPayAddToWalletView : Swift.Sendable {}
extension AnsaUI.AlertViewType : Swift.Equatable {}
extension AnsaUI.AlertViewType : Swift.Hashable {}
extension AnsaUI.AlertShape : Swift.Equatable {}
extension AnsaUI.AlertShape : Swift.Hashable {}
extension AnsaUI.AnsaButton : Swift.Sendable {}
extension AnsaUI.BasisTheoryAddCardView : Swift.Sendable {}
extension AnsaUI.BasisTheoryCardView : Swift.Sendable {}
extension AnsaUI.BasisTheoryCardDetailsView : Swift.Sendable {}
extension AnsaUI.ReloadBucketView : Swift.Sendable {}
extension AnsaUI.AlertView : Swift.Sendable {}
extension AnsaUI.AutoReloadBottomSheetView : Swift.Sendable {}
extension AnsaUI.PaymentCardType : Swift.Equatable {}
extension AnsaUI.PaymentCardType : Swift.Hashable {}
extension AnsaUI.PaymentCardType : Swift.RawRepresentable {}
extension AnsaUI.AnsaTransactionView : Swift.Sendable {}
extension AnsaUI.AddNewCardBottomSheetView : Swift.Sendable {}
extension AnsaUI.CurrencyTextField : Swift.Sendable {}
extension AnsaUI.AboutTapToPayLineType : Swift.Equatable {}
extension AnsaUI.AboutTapToPayLineType : Swift.Hashable {}
extension AnsaUI.AboutTapToPayInfoView : Swift.Sendable {}
extension AnsaUI.AboutTapToPayLineView : Swift.Sendable {}
extension AnsaUI.CurrencyTextFieldSwiftUIWrapper : Swift.Sendable {}
extension AnsaUI.CurrencyTextFieldSwiftUIWrapper.Coordinator : Swift.Sendable {}
