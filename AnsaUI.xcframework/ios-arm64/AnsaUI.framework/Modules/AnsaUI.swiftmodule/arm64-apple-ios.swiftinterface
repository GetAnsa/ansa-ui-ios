// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature AccessLevelOnImport -enable-bare-slash-regex -module-name AnsaUI
import AnsaCore
@_exported import AnsaUI
import Combine
import DeveloperToolsSupport
import Foundation
import PassKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _PassKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class AnsaTheme {
  public static func set(brandColors: AnsaUI.BrandColors? = nil, fonts: AnsaUI.AnsaFonts? = nil)
  @objc deinit
}
public enum PaymentMethodUiModel : Swift.Equatable, Swift.Hashable {
  case creditCard(uiModel: AnsaUI.CardUiModel)
  case applePay
  case unknown
  public var imageSource: AnsaUI.AnsaImageSource {
    get
  }
  public var id: Swift.String? {
    get
  }
  public var obfuscatedCardNumber: Swift.String {
    get
  }
  public func isValid() -> Swift.Bool
  public static func == (a: AnsaUI.PaymentMethodUiModel, b: AnsaUI.PaymentMethodUiModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CardUiModel : Swift.Equatable, Swift.Hashable {
  public init(id: Swift.String, brand: AnsaUI.CardBrand, firstSix: Swift.String, lastFour: Swift.String, isExpired: Swift.Bool)
  public static func == (a: AnsaUI.CardUiModel, b: AnsaUI.CardUiModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CardBrand {
  case amex
  case mastercard
  case maestro
  case visa
  case visaElectron
  case discover
  case dinersClub
  case unknown
  public var displayname: Swift.String {
    get
  }
  public var imageSource: AnsaUI.AnsaImageSource {
    get
  }
  public static func == (a: AnsaUI.CardBrand, b: AnsaUI.CardBrand) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AboutTapToPayActionView : SwiftUI.View {
  public init(uiModel: AnsaUI.TapToPayUiModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI23AboutTapToPayActionViewV4bodyQrvp", 0) __
}
public struct PaymentMethodPreview : SwiftUI.View {
  public init(selectedPaymentMethod: AnsaUI.PaymentMethodUiModel?, onClick: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI20PaymentMethodPreviewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor(unsafe) public struct RedeemGiftCardBottomSheetView : SwiftUI.View {
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public init(onAddCardClick: @escaping AnsaUI.RedeemGiftCardAction)
  #endif
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI29RedeemGiftCardBottomSheetViewV4bodyQrvp", 0) __
}

public struct AnsaErrorView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A9ErrorViewV4bodyQrvp", 0) __
}

public struct BrandColors {
  public init(primary: SwiftUI.Color? = nil, secondary: SwiftUI.Color? = nil)
}
public struct AnsaImage : SwiftUI.View {
  public init(source: AnsaUI.AnsaImageSource, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A5ImageV4bodyQrvp", 0) __
}
public enum AnsaImageSource : Swift.String {
  case autopay
  case wallet
  case sparkle
  case alert
  case close
  case check
  case error
  case backArrow
  case chevronRight
  case chevronLeft
  case plus
  case nfc
  case location
  case errorCard
  case placeholderCard
  case applePay
  case americanExpress
  case dinersClub
  case discover
  case maestro
  case masterCard
  case visaElectron
  case visa
  case ansaCard
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct GiftCardActionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI18GiftCardActionViewV4bodyQrvp", 0) __
}
#if compiler(>=5.3) && $AsyncAwait
public typealias CreateVirtualCardAction = () async -> (Swift.Result<AnsaShared.VirtualCard, AnsaCore.AnsaApiError>)
#endif
#if compiler(>=5.3) && $AsyncAwait
public typealias ProvisioningVirtualCardAction = (Swift.String, AnsaShared.WalletProvider) async -> (Swift.Result<AnsaShared.Provisioning, AnsaCore.AnsaApiError>)
#endif
extension AnsaShared.VirtualCard : Swift.Identifiable {
  public typealias ID = Swift.String
}
public enum AnsaButtonState {
  case disabled
  case loading
  case enabled
  public var isEnabled: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public static func == (a: AnsaUI.AnsaButtonState, b: AnsaUI.AnsaButtonState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AutoReloadUiModel {
  case enabled(paymentMethodId: Swift.String?, reloadAmount: Swift.Int?, reloadThreshold: Swift.Int?)
  case disabled(reloadThreshold: Swift.Int?)
}
public enum AutoReloadUpdateInfo {
  case enabled(paymentMethodId: Swift.String, reloadAmount: Swift.Int, reloadThreshold: Swift.Int)
  case disabled
}
public struct AutoReloadActionView : SwiftUI.View {
  public init(uiModel: AnsaUI.AutoReloadUiModel, onClick: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI20AutoReloadActionViewV4bodyQrvp", 0) __
}
public typealias AddPaymentSourceClick = (() -> Swift.Void)
@_Concurrency.MainActor(unsafe) public struct AddFundsBottomSheet : SwiftUI.View {
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public init(reloadBuckets: [AnsaUI.ReloadBucketUiModel], customCurrencyInputSetting: AnsaUI.CustomCurrencyInputSetting, paymentMethods: [AnsaUI.PaymentMethodUiModel], applePayConfiguration: AnsaUI.ApplePayConfiguration?, addPaymentSourceClick: @escaping AnsaUI.AddPaymentSourceClick, addFundsClick: @escaping (AnsaUI.ReloadAmountSelection, Swift.String) async -> Swift.Result<any AnsaShared.BalanceUpdate, AnsaUI.AnsaError>)
  #endif
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI19AddFundsBottomSheetV4bodyQrvp", 0) __
}
public struct TransactionHistoryTable : SwiftUI.View {
  public init(transactions: [AnsaUI.TransactionUiModel])
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI23TransactionHistoryTableV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct ManagedAnsaBalanceScreen<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(ansaClient: any AnsaCore.AnsaClient, customerId: Swift.String, merchantId: Swift.String, applePayConfiguration: AnsaUI.ApplePayConfiguration? = nil, triggerRefresh: SwiftUI.Binding<Swift.Bool> = .constant(false), addPaymentSourceContent: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public init(ansaClient: any AnsaCore.AnsaClient, customerId: Swift.String, merchantId: Swift.String, applePayConfiguration: AnsaUI.ApplePayConfiguration? = nil, triggerRefresh: SwiftUI.Binding<Swift.Bool> = .constant(false)) where Content == SwiftUI.EmptyView
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI07ManagedA13BalanceScreenV4bodyQrvp", 0) __<Content>
}
public struct AnsaActionView<EndSlotView> : SwiftUI.View where EndSlotView : SwiftUI.View {
  public init(icon: SwiftUI.Image?, label: Swift.String, subtitle: Swift.String? = nil, endSlot: @escaping () -> EndSlotView, onClick: @escaping () -> Swift.Void)
  public init(icon: SwiftUI.Image?, label: Swift.String, subtitle: Swift.String? = nil, onClick: @escaping () -> Swift.Void) where EndSlotView == SwiftUI.EmptyView
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A10ActionViewV4bodyQrvp", 0) __<EndSlotView>
}

public struct AnsaFonts {
}
public struct TitleFonts {
}
public struct BodyFonts {
}
@_Concurrency.MainActor(unsafe) public struct TapToPayActionView : SwiftUI.View {
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public init(uiModel: AnsaUI.TapToPayUiModel, ansaLogger: any AnsaShared.AnsaLogger, createVirtualCardAction: @escaping AnsaUI.CreateVirtualCardAction, provisioningVirtualCardAction: @escaping AnsaUI.ProvisioningVirtualCardAction)
  #endif
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI18TapToPayActionViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class PaymentMethodUpdateManager {
  public static let shared: AnsaUI.PaymentMethodUpdateManager
  public func onPaymentMethodAdded(paymentMethod: AnsaShared.PaymentMethod)
  @objc deinit
}
public typealias AmountInCents = Swift.Int
public typealias AmountInDollars = Swift.Double
public struct AnsaBalanceScreen : SwiftUI.View {
  #if compiler(>=5.3) && $AsyncAwait
  public init(walletBalance: Swift.String, alertViewUiModel: AnsaUI.AlertViewUiModel?, tapToPayUiModel: AnsaUI.TapToPayUiModel?, autoReloadUiModel: AnsaUI.AutoReloadUiModel?, giftCardConfigUiModel: AnsaUI.GiftCardConfigurationUiModel?, transactions: [AnsaUI.TransactionUiModel], cardArtUrl: Swift.String?, isDemoMode: Swift.Bool, ansaLogger: any AnsaShared.AnsaLogger, addFundsClick: @escaping () -> Swift.Void, autoReloadRowClick: @escaping () -> Swift.Void, redeemGiftCardClick: AnsaUI.RedeemGiftCardAction?, createVirtualCardAction: @escaping AnsaUI.CreateVirtualCardAction, provisionVirtualCardAction: @escaping AnsaUI.ProvisioningVirtualCardAction, onRefreshRequsted: @escaping () async -> Swift.Void, onBackClick: (() -> Swift.Void)? = nil)
  #endif
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A13BalanceScreenV4bodyQrvp", 0) __
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CurrencyUITextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public init(value: SwiftUI.Binding<Swift.Int>, fontSize: Swift.Int, hintText: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func deleteBackward()
  @_Concurrency.MainActor(unsafe) public func updateValue(value: Swift.Int)
  @objc deinit
}
public struct ApplePayConfiguration {
  #if compiler(>=5.3) && $AsyncAwait
  public init(applePayMerchantName: Swift.String, applePayMerchantId: Swift.String, addApplePaymentMethod: ((PassKit.PKPayment) async -> AnsaUI.ApplePayResult)? = nil)
  #endif
}
public enum ApplePayResult {
  case success(Swift.String)
  case failure(AnsaUI.AnsaError)
}
public enum AnsaError : Swift.Error {
  case readableError(Swift.String)
  case genericError
}
@_Concurrency.MainActor(unsafe) public struct TapToPayAddToWalletView : SwiftUI.View {
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public init(uiModel: AnsaUI.TapToPayUiModel, ansaLogger: any AnsaShared.AnsaLogger, createVirtualCardAction: @escaping AnsaUI.CreateVirtualCardAction, provisioningVirtualCardAction: @escaping AnsaUI.ProvisioningVirtualCardAction)
  #endif
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI011TapToPayAddD10WalletViewV4bodyQrvp", 0) __
}

public struct AlertViewUiModel {
  public let primaryText: Swift.String
  public let secondaryText: Swift.String?
  public let alertViewType: AnsaUI.AlertViewType
  public let alertShape: AnsaUI.AlertShape
  public init(primaryText: Swift.String, secondaryText: Swift.String?, alertViewType: AnsaUI.AlertViewType, alertShape: AnsaUI.AlertShape)
}
public enum AlertViewType {
  case bonus
  case alert
  public static func == (a: AnsaUI.AlertViewType, b: AnsaUI.AlertViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AlertShape {
  case upArrow
  case downArrow
  public static func == (a: AnsaUI.AlertShape, b: AnsaUI.AlertShape) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AnsaButton : SwiftUI.View {
  public let label: Swift.String
  public let enabled: Swift.Bool
  public let backgroundColor: SwiftUI.Color
  public let labelColor: SwiftUI.Color
  public let cornerRadius: CoreFoundation.CGFloat
  public let isLoading: Swift.Bool
  public let leftIcon: SwiftUI.Image?
  public let rightIcon: SwiftUI.Image?
  public let onClick: () -> Swift.Void
  public init(label: Swift.String, enabled: Swift.Bool = true, backgroundColor: SwiftUI.Color? = nil, labelColor: SwiftUI.Color? = nil, cornerRadius: CoreFoundation.CGFloat = 8, isLoading: Swift.Bool = false, leftIcon: SwiftUI.Image? = nil, rightIcon: SwiftUI.Image? = nil, onClick: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A6ButtonV4bodyQrvp", 0) __
}

public struct GiftCardConfigurationUiModel {
}
public struct TapToPayUiModel {
  public init(merchantName: Swift.String)
}
public enum CustomCurrencyInputSetting : Swift.Hashable {
  case enabled(AnsaUI.CustomCurrencyInputUiModel)
  case disabled
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AnsaUI.CustomCurrencyInputSetting, b: AnsaUI.CustomCurrencyInputSetting) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension AnsaUI.CustomCurrencyInputSetting {
  public var minimumAmount: AnsaUI.AmountInCents? {
    get
  }
  public var maximumAmount: AnsaUI.AmountInCents? {
    get
  }
  public func isInputValid(input: AnsaUI.AmountInCents) -> Swift.Bool
  public func inputErrorMessage(input: AnsaUI.AmountInCents) -> Swift.String?
}
public struct CustomCurrencyInputUiModel : Swift.Hashable {
  public init(minimum: AnsaUI.AmountInCents?, maximum: AnsaUI.AmountInCents?, reloadBuckets: [AnsaUI.ReloadBucketUiModel]?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AnsaUI.CustomCurrencyInputUiModel, b: AnsaUI.CustomCurrencyInputUiModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Result where Success == () {
  public static func success() -> Swift.Result<Success, Failure>
}
@_Concurrency.MainActor(unsafe) public struct BasisTheoryAddCardView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI22BasisTheoryAddCardViewV4bodyQrvp", 0) __
}
public struct BasisTheoryCardView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI19BasisTheoryCardViewV4bodyQrvp", 0) __
}
public struct BasisTheoryCardDetailsView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI26BasisTheoryCardDetailsViewV4bodyQrvp", 0) __<Content>
}
public struct ReloadBucketUiModel : Swift.Hashable {
  public init(id: Swift.String, reloadAmount: Swift.Int, bonusAmount: Swift.Int?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AnsaUI.ReloadBucketUiModel, b: AnsaUI.ReloadBucketUiModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Array where Element == AnsaUI.ReloadBucketUiModel {
  public func hasBonus() -> Swift.Bool
}
extension AnsaUI.ReloadBucketUiModel {
  public var topUpAmountDisplayString: Swift.String {
    get
  }
  public var bonusAmountDisplayString: Swift.String? {
    get
  }
  public func hasBonus() -> Swift.Bool
  public func isSelected(currentSelection: AnsaUI.ReloadAmountSelection?) -> Swift.Bool
  public func topUpAndBonusDisplayString() -> Foundation.AttributedString
}
extension Swift.Array where Element == AnsaUI.ReloadBucketUiModel {
  public func getDefaultBucket() -> AnsaUI.ReloadBucketUiModel?
}
public struct ReloadBucketView : SwiftUI.View {
  public init(uiModel: AnsaUI.ReloadBucketUiModel, isSelected: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI16ReloadBucketViewV4bodyQrvp", 0) __
}


extension SwiftUI.View {
  public func ansaNavigationBar<LeadingSlotView, TrailingSlotView>(title: Swift.String = "Wallet", leadingSlot: @escaping (() -> LeadingSlotView), trailingSlot: @escaping (() -> TrailingSlotView)) -> some SwiftUI.View where LeadingSlotView : SwiftUI.View, TrailingSlotView : SwiftUI.View
  
  public func ansaNavigationBar<LeadingSlotView>(title: Swift.String = "Wallet", leadingSlot: @escaping (() -> LeadingSlotView)) -> some SwiftUI.View where LeadingSlotView : SwiftUI.View
  
  public func ansaNavigationBar<TrailingSlotView>(title: Swift.String = "Wallet", trailingSlot: @escaping (() -> TrailingSlotView)) -> some SwiftUI.View where TrailingSlotView : SwiftUI.View
  
  public func ansaNavigationBar(title: Swift.String = "Wallet") -> some SwiftUI.View
  
}
public struct AlertView : SwiftUI.View {
  public let uiModel: AnsaUI.AlertViewUiModel
  public init(uiModel: AnsaUI.AlertViewUiModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI9AlertViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor(unsafe) public struct AutoReloadBottomSheetView : SwiftUI.View {
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public init(autoReloadUiModel: AnsaUI.AutoReloadUiModel, reloadBuckets: [AnsaUI.ReloadBucketUiModel], customCurrencyInputSetting: AnsaUI.CustomCurrencyInputSetting, paymentMethods: [AnsaUI.PaymentMethodUiModel], addPaymentSourceClick: @escaping () -> Swift.Void, onSaveClick: @escaping (AnsaUI.AutoReloadUpdateInfo) async -> Swift.Result<AnsaShared.AutoReloadConfiguration, AnsaUI.AnsaError>)
  #endif
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI25AutoReloadBottomSheetViewV4bodyQrvp", 0) __
}
public enum PaymentCardType : Swift.String {
  case amex
  case mastercard
  case maestro
  case visa
  case visaElectron
  case discover
  case dinersClub
  public static var all: [AnsaUI.PaymentCardType]
  public init?(cardNumber: Swift.String)
  public static func suggestedTypeForCardNumber(_ cardNumber: Swift.String?) -> AnsaUI.PaymentCardType?
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ReloadAmountSelection {
  case preconfigured(AnsaUI.ReloadBucketUiModel)
  case custom(AnsaUI.AmountInDollars)
}
#if compiler(>=5.3) && $AsyncAwait
public typealias RedeemGiftCardAction = (Swift.String) async -> (Swift.Result<Swift.Void, AnsaUI.AnsaError>)
#endif
public struct TransactionUiModel : Swift.Hashable {
  public init(id: Swift.String, transactionText: Swift.String, dataAndTimeText: Swift.String, amount: Swift.String, isCredit: Swift.Bool?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AnsaUI.TransactionUiModel, b: AnsaUI.TransactionUiModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AnsaTransactionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI0A15TransactionViewV4bodyQrvp", 0) __
}

public typealias AddPaymentMethodCompletion = (Swift.Result<AnsaShared.PaymentMethod, any Swift.Error>) -> Swift.Void
@_Concurrency.MainActor(unsafe) public struct AddNewCardBottomSheetView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI25AddNewCardBottomSheetViewV4bodyQrvp", 0) __
}
public struct CurrencyTextField : SwiftUI.UIViewRepresentable {
  public typealias UIViewType = AnsaUI.CurrencyUITextField
  public init(value: SwiftUI.Binding<Swift.Int>, forceOverrideValue: SwiftUI.Binding<Swift.Int>, fontSize: Swift.Int, hintText: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: AnsaUI.CurrencyTextField.Context) -> AnsaUI.CurrencyUITextField
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: AnsaUI.CurrencyUITextField, context: AnsaUI.CurrencyTextField.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
}
public enum AboutTapToPayLineType {
  case addToWallet
  case checkout
  case use
  public static func == (a: AnsaUI.AboutTapToPayLineType, b: AnsaUI.AboutTapToPayLineType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AboutTapToPayInfoView : SwiftUI.View {
  public init(uiModel: AnsaUI.TapToPayUiModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI21AboutTapToPayInfoViewV4bodyQrvp", 0) __
}
public struct AboutTapToPayLineView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6AnsaUI21AboutTapToPayLineViewV4bodyQrvp", 0) __
}
extension SwiftUI.View {
  public func ansaSheet<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
  public func ansaSheet<Item, Content>(item: SwiftUI.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
}
public struct CurrencyTextFieldSwiftUIWrapper : SwiftUI.UIViewRepresentable {
  public init(_ placeholder: Swift.String = "", value: SwiftUI.Binding<Swift.Double?>, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, tag: Swift.Int = 0, alwaysShowFractions: Swift.Bool = true, numberOfDecimalPlaces: Swift.Int = 2, currencySymbol: Swift.String? = "$", font: UIKit.UIFont? = nil, foregroundColor: UIKit.UIColor? = nil, accentColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment? = nil, contentType: UIKit.UITextContentType? = nil, autocorrection: UIKit.UITextAutocorrectionType = .default, autocapitalization: UIKit.UITextAutocapitalizationType = .sentences, keyboardType: UIKit.UIKeyboardType = .decimalPad, returnKeyType: UIKit.UIReturnKeyType = .default, isSecure: Swift.Bool = false, isUserInteractionEnabled: Swift.Bool = true, clearsOnBeginEditing: Swift.Bool = false, onDoneClick: @escaping () -> Swift.Void = {}, onReturn: @escaping () -> Swift.Void = {}, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SwiftUI.UIViewRepresentableContext<AnsaUI.CurrencyTextFieldSwiftUIWrapper>) -> UIKit.UITextField
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> AnsaUI.CurrencyTextFieldSwiftUIWrapper.Coordinator
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ textField: UIKit.UITextField, context: SwiftUI.UIViewRepresentableContext<AnsaUI.CurrencyTextFieldSwiftUIWrapper>)
  @_Concurrency.MainActor(unsafe) public static func dismantleUIView(_ uiView: UIKit.UITextField, coordinator: AnsaUI.CurrencyTextFieldSwiftUIWrapper.Coordinator)
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Coordinator : ObjectiveC.NSObject, UIKit.UITextFieldDelegate {
    @_Concurrency.MainActor(unsafe) @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
    @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
    @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = UIKit.UITextField
}
extension AnsaUI.CardBrand : Swift.Equatable {}
extension AnsaUI.CardBrand : Swift.Hashable {}
extension AnsaUI.AnsaImageSource : Swift.Equatable {}
extension AnsaUI.AnsaImageSource : Swift.Hashable {}
extension AnsaUI.AnsaImageSource : Swift.RawRepresentable {}
extension AnsaUI.AnsaButtonState : Swift.Equatable {}
extension AnsaUI.AnsaButtonState : Swift.Hashable {}
extension AnsaUI.AlertViewType : Swift.Equatable {}
extension AnsaUI.AlertViewType : Swift.Hashable {}
extension AnsaUI.AlertShape : Swift.Equatable {}
extension AnsaUI.AlertShape : Swift.Hashable {}
extension AnsaUI.PaymentCardType : Swift.Equatable {}
extension AnsaUI.PaymentCardType : Swift.Hashable {}
extension AnsaUI.PaymentCardType : Swift.RawRepresentable {}
extension AnsaUI.AboutTapToPayLineType : Swift.Equatable {}
extension AnsaUI.AboutTapToPayLineType : Swift.Hashable {}
